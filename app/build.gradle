apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao' // apply greenDao plugin
apply from: 'and-res-guard.gradle'

def key = file('F:\\Keystore\\tianma.jks')

def keyProps = new Properties()
keyProps.load(new FileInputStream("F:\\Keystore\\signature.properties"))

def static releaseTime() {
    return new Date().format("yyMMdd", TimeZone.default)
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.github.tianma8023.xposed.smscode"
        minSdkVersion 23
        targetSdkVersion 27
        versionCode 36
        versionName "2.1.1"

        buildConfigField("String", "LOG_TAG", "\"T-SmsCode\"")
        buildConfigField("int", "MODULE_VERSION", "36")

        vectorDrawables.generatedDensities = ['hdpi']

        resConfigs("en", "zh-rCN", "zh-rTW")
    }

    signingConfigs {
        release {
            storeFile key
            storePassword keyProps['STORE_PASSWORD']
            keyAlias keyProps['KEY_ALIAS']
            keyPassword keyProps['KEY_PASSWORD']
        }
    }

    buildTypes {
        debug {
            buildConfigField("int", "LOG_LEVEL", "2")
            buildConfigField("boolean", "LOG_TO_XPOSED", "true")
            buildConfigField("boolean", "LOG_TO_EDXPOSED", "true")

            if (key.exists()) {
                println "using tianma's keystore"
                signingConfig signingConfigs.release
            } else {
                println "using no keystore"
            }
        }

        release {
            minifyEnabled true
            shrinkResources true

            buildConfigField("int", "LOG_LEVEL", "4")
            buildConfigField("boolean", "LOG_TO_XPOSED", "true")
            buildConfigField("boolean", "LOG_TO_EDXPOSED", "true")
            if (key.exists()) {
                println "using tianma's keystore"
                signingConfig signingConfigs.release
            } else {
                println "using no keystore"
            }

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            lintOptions {
                disable 'MissingTranslation'
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            output.outputFileName = "XposedSmsCode_v${variant.versionName.replaceAll('\\s+', '_')}_${releaseTime()}_${variant.buildType.name.charAt(0)}.apk"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

greendao {
    schemaVersion 8
}

ext {
    dagger2Version = "2.23.2" // dagger 2

    rxJavaVersion = "2.2.10" // RxJava 2
    rxAndroidVersion = "2.1.1" // RxAndroid 2
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
//    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.0.0' // material design support
    implementation 'androidx.recyclerview:recyclerview:1.0.0' // recycler view
    implementation 'androidx.cardview:cardview:1.0.0' // card view
    implementation 'androidx.browser:browser:1.0.0' // custom tabs
    implementation 'androidx.preference:preference:1.0.0' // preference support

    // ButterKnife
    implementation 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'

    // Xposed
    compileOnly 'de.robv.android.xposed:api:82'
    compileOnly 'de.robv.android.xposed:api:82:sources'

    // Material Dialogs
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'

    // Android Shell
    implementation 'com.jaredrummler:android-shell:1.0.0'

    // EventBus
    implementation 'org.greenrobot:eventbus:3.1.1'

    // GreenDao
    implementation 'org.greenrobot:greendao:3.2.2'
    // GreenDao Upgrade Helper
    implementation 'com.github.yuweiguocn:GreenDaoUpgradeHelper:v2.1.0'

    // Gson
    implementation 'com.google.code.gson:gson:2.8.5'

    // dagger2
    implementation "com.google.dagger:dagger:$dagger2Version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger2Version"
    // dagger2-android
    implementation "com.google.dagger:dagger-android:$dagger2Version"
    implementation "com.google.dagger:dagger-android-support:$dagger2Version"
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger2Version"

    // RxJava 2
    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    // RxAndroid 2
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
}
